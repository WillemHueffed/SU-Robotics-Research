// generated from rosidl_adapter/resource/srv.idl.em
// with input from interbotix_perception_msgs/srv/FilterParams.srv
// generated code does not contain a copyright notice


module interbotix_perception_msgs {
  module srv {
    @verbatim (language="comment", text=
      " This service is used specifically in the interbotix_perception_modules package" "\n"
      "" "\n"
      " Parameters used to tune the various PCL Pointcloud filters")
    struct FilterParams_Request {
      @verbatim (language="comment", text=
        " minimum value along the x axis beyond which all points will be cropped when doing Crop Box Filtering")
      @unit (value="m")
      float x_filter_min;

      @verbatim (language="comment", text=
        " maximum value along the x axis beyond which all points will be cropped when doing Crop Box Filtering")
      @unit (value="m")
      float x_filter_max;

      @verbatim (language="comment", text=
        " minimum value along the y axis beyond which all points will be cropped when doing Crop Box Filtering")
      @unit (value="m")
      float y_filter_min;

      @verbatim (language="comment", text=
        " maximum value along the y axis beyond which all points will be cropped when doing Crop Box Filtering")
      @unit (value="m")
      float y_filter_max;

      @verbatim (language="comment", text=
        " minimum value along the z axis beyond which all points will be cropped when doing Crop Box Filtering")
      @unit (value="m")
      float z_filter_min;

      @verbatim (language="comment", text=
        " maximum value along the z axis beyond which all points will be cropped when doing Crop Box Filtering")
      @unit (value="m")
      float z_filter_max;

      @verbatim (language="comment", text=
        " voxel leaf size for the x, y, and z axes when doing Voxel Filtering")
      @unit (value="m")
      float voxel_leaf_size;

      @verbatim (language="comment", text=
        " maximum number of iterations the algorithm should go when when doing Planar Segmentation")
      int32 plane_max_iter;

      @verbatim (language="comment", text=
        " distance perpendicular from the planar model outside of which points should not be segmented out when doing Planar Segmentation")
      @unit (value="m")
      float plane_dist_thresh;

      @verbatim (language="comment", text=
        " desired search radius when doing Radius Outlier Removal")
      float ror_radius_search;

      @verbatim (language="comment", text=
        " minimum number of neighbors a point should have to not be cropped out when doing Radius Outlier Removal")
      int32 ror_min_neighbors;

      @verbatim (language="comment", text=
        " any point within this distance will be considered part of the same cluster")
      @unit (value="m")
      float cluster_tol;

      @verbatim (language="comment", text=
        " minimum number of points a cluster must have to be considered a cluster")
      int32 cluster_min_size;

      @verbatim (language="comment", text=
        " maximum number of points a cluster can have to be considered a cluster")
      int32 cluster_max_size;
    };
    struct FilterParams_Response {
      uint8 structure_needs_at_least_one_member;
    };
  };
};
